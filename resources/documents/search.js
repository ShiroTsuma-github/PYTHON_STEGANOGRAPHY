window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src", "modulename": "src", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.GUI", "modulename": "src.GUI", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.GUI.ROOT_DIR", "modulename": "src.GUI", "qualname": "ROOT_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;E:\\\\GitHub\\\\PYTHON_STEGANOGRAPHY&#x27;"}, {"fullname": "src.GUI.get_config_path", "modulename": "src.GUI", "qualname": "get_config_path", "kind": "function", "doc": "<p>Return valid path for app, when run in main.py or exe,\nto allow for permanent settings.</p>\n\n<p>Returns:\n    str: Valid path to use</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.load_json", "modulename": "src.GUI", "qualname": "load_json", "kind": "function", "doc": "<p>Loads config.json, that stores default path to images.</p>\n\n<p>Args:\n    option (str): Setting from json</p>\n\n<p>Returns:\n    str | None: Setting if exists. None if error or it doesn't exist</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">option</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.save_json", "modulename": "src.GUI", "qualname": "save_json", "kind": "function", "doc": "<p>Saves setting to json. Based on main.py or .exe location is different.</p>\n\n<p>Args:\n    option (str): Option to overwrite or add\n    image_directory (str): Location to add</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">option</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">image_directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.ImageFrame", "modulename": "src.GUI", "qualname": "ImageFrame", "kind": "class", "doc": "<p>Frame that holds button to choose image and image picker</p>\n\n<p>Args:\n    ctk (CTkFrame): customtkinter container for objects</p>\n", "bases": "customtkinter.windows.widgets.ctk_frame.CTkFrame"}, {"fullname": "src.GUI.ImageFrame.__init__", "modulename": "src.GUI", "qualname": "ImageFrame.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">master</span></span>)</span>"}, {"fullname": "src.GUI.ImageFrame.image", "modulename": "src.GUI", "qualname": "ImageFrame.image", "kind": "variable", "doc": "<p>Image to display</p>\n"}, {"fullname": "src.GUI.ImageFrame.image_path", "modulename": "src.GUI", "qualname": "ImageFrame.image_path", "kind": "variable", "doc": "<p>Path of image</p>\n"}, {"fullname": "src.GUI.ImageFrame.c_font", "modulename": "src.GUI", "qualname": "ImageFrame.c_font", "kind": "variable", "doc": "<p>Font used</p>\n"}, {"fullname": "src.GUI.ImageFrame.btn_choose", "modulename": "src.GUI", "qualname": "ImageFrame.btn_choose", "kind": "variable", "doc": "<p>Button for displaying Image and text. Interactive</p>\n"}, {"fullname": "src.GUI.ImageFrame.choose_img", "modulename": "src.GUI", "qualname": "ImageFrame.choose_img", "kind": "function", "doc": "<p>Action after clicking button | Image. Shows filedialog</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.ImageFrame.clear_img", "modulename": "src.GUI", "qualname": "ImageFrame.clear_img", "kind": "function", "doc": "<p>Action invoked by pressing Clear button.\nInterface to allow clearing through master</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.ImageFrame.get_image_path", "modulename": "src.GUI", "qualname": "ImageFrame.get_image_path", "kind": "function", "doc": "<p>Returns image displayed, to be used when getting displayed image</p>\n\n<p>Returns:\n    str: Image displayed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.ButtonFrame", "modulename": "src.GUI", "qualname": "ButtonFrame", "kind": "class", "doc": "<p>Frame holding main images and container with icon buttons and key field</p>\n\n<p>Args:\n    ctk (CtkFrame): customtkinter container for objects</p>\n", "bases": "customtkinter.windows.widgets.ctk_frame.CTkFrame"}, {"fullname": "src.GUI.ButtonFrame.__init__", "modulename": "src.GUI", "qualname": "ButtonFrame.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">master</span></span>)</span>"}, {"fullname": "src.GUI.ButtonFrame.master", "modulename": "src.GUI", "qualname": "ButtonFrame.master", "kind": "variable", "doc": "<p>Parent of ButtonFrame</p>\n"}, {"fullname": "src.GUI.ButtonFrame.b_font", "modulename": "src.GUI", "qualname": "ButtonFrame.b_font", "kind": "variable", "doc": "<p>Button big font</p>\n"}, {"fullname": "src.GUI.ButtonFrame.t_font", "modulename": "src.GUI", "qualname": "ButtonFrame.t_font", "kind": "variable", "doc": "<p>Text font</p>\n"}, {"fullname": "src.GUI.ButtonFrame.btn_encode", "modulename": "src.GUI", "qualname": "ButtonFrame.btn_encode", "kind": "variable", "doc": "<p>Button to encode text</p>\n"}, {"fullname": "src.GUI.ButtonFrame.btn_decode", "modulename": "src.GUI", "qualname": "ButtonFrame.btn_decode", "kind": "variable", "doc": "<p>Button to decode text</p>\n"}, {"fullname": "src.GUI.ButtonFrame.key_input", "modulename": "src.GUI", "qualname": "ButtonFrame.key_input", "kind": "variable", "doc": "<p>Key input</p>\n"}, {"fullname": "src.GUI.ButtonFrame.key_frame", "modulename": "src.GUI", "qualname": "ButtonFrame.key_frame", "kind": "variable", "doc": "<p>Frame holding icon buttons for easier layout</p>\n"}, {"fullname": "src.GUI.ButtonFrame.encode", "modulename": "src.GUI", "qualname": "ButtonFrame.encode", "kind": "function", "doc": "<p>Encodes and saves image, after text, image and key are picked and valid.\nShows errors before that and after everything is valid it shows file save dialog</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.ButtonFrame.decode", "modulename": "src.GUI", "qualname": "ButtonFrame.decode", "kind": "function", "doc": "<p>Decodes image and displays decoded content, after image and key are valid</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.KeyFrame", "modulename": "src.GUI", "qualname": "KeyFrame", "kind": "class", "doc": "<p>Frame for icon buttons for easier layout</p>\n\n<p>Args:\n    ctk (CTkFrame): customtkinter container for objects</p>\n", "bases": "customtkinter.windows.widgets.ctk_frame.CTkFrame"}, {"fullname": "src.GUI.KeyFrame.__init__", "modulename": "src.GUI", "qualname": "KeyFrame.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">master</span></span>)</span>"}, {"fullname": "src.GUI.KeyFrame.master", "modulename": "src.GUI", "qualname": "KeyFrame.master", "kind": "variable", "doc": "<p>ButtonFrame is master</p>\n"}, {"fullname": "src.GUI.KeyFrame.key_gen", "modulename": "src.GUI", "qualname": "KeyFrame.key_gen", "kind": "variable", "doc": "<p>Button to generate random key</p>\n"}, {"fullname": "src.GUI.KeyFrame.img_random", "modulename": "src.GUI", "qualname": "KeyFrame.img_random", "kind": "variable", "doc": "<p>Icon for button random</p>\n"}, {"fullname": "src.GUI.KeyFrame.img_copy", "modulename": "src.GUI", "qualname": "KeyFrame.img_copy", "kind": "variable", "doc": "<p>Icon for button copy</p>\n"}, {"fullname": "src.GUI.KeyFrame.img_clear", "modulename": "src.GUI", "qualname": "KeyFrame.img_clear", "kind": "variable", "doc": "<p>Icon for button clear</p>\n"}, {"fullname": "src.GUI.KeyFrame.btn_clear", "modulename": "src.GUI", "qualname": "KeyFrame.btn_clear", "kind": "variable", "doc": "<p>Clear button</p>\n"}, {"fullname": "src.GUI.KeyFrame.btn_copy", "modulename": "src.GUI", "qualname": "KeyFrame.btn_copy", "kind": "variable", "doc": "<p>Copy button</p>\n"}, {"fullname": "src.GUI.KeyFrame.btn_generate", "modulename": "src.GUI", "qualname": "KeyFrame.btn_generate", "kind": "variable", "doc": "<p>Generate Key button</p>\n"}, {"fullname": "src.GUI.KeyFrame.generate_key", "modulename": "src.GUI", "qualname": "KeyFrame.generate_key", "kind": "function", "doc": "<p>Generates random preconfigured key and inserts in key input field</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.KeyFrame.clear", "modulename": "src.GUI", "qualname": "KeyFrame.clear", "kind": "function", "doc": "<p>Clears output, image displayed and key field</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.KeyFrame.copy", "modulename": "src.GUI", "qualname": "KeyFrame.copy", "kind": "function", "doc": "<p>Copies key to clipboard</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.DataFrame", "modulename": "src.GUI", "qualname": "DataFrame", "kind": "class", "doc": "<p>Frame for input and output fields</p>\n\n<p>Args:\n    ctk (CTkFrame): customtkinter container for objects</p>\n", "bases": "customtkinter.windows.widgets.ctk_frame.CTkFrame"}, {"fullname": "src.GUI.DataFrame.__init__", "modulename": "src.GUI", "qualname": "DataFrame.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">master</span></span>)</span>"}, {"fullname": "src.GUI.DataFrame.master", "modulename": "src.GUI", "qualname": "DataFrame.master", "kind": "variable", "doc": "<p>Parent of container</p>\n"}, {"fullname": "src.GUI.DataFrame.t_font", "modulename": "src.GUI", "qualname": "DataFrame.t_font", "kind": "variable", "doc": "<p>Text field font</p>\n"}, {"fullname": "src.GUI.DataFrame.input_field", "modulename": "src.GUI", "qualname": "DataFrame.input_field", "kind": "variable", "doc": "<p>Field for inputting text to encode</p>\n"}, {"fullname": "src.GUI.DataFrame.output_field", "modulename": "src.GUI", "qualname": "DataFrame.output_field", "kind": "variable", "doc": "<p>Output field. Displays results of processes</p>\n"}, {"fullname": "src.GUI.DataFrame.get_input", "modulename": "src.GUI", "qualname": "DataFrame.get_input", "kind": "function", "doc": "<p>Interface to get input easier in parent</p>\n\n<p>Returns:\n    str: Content of input field</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.DataFrame.put_into_output", "modulename": "src.GUI", "qualname": "DataFrame.put_into_output", "kind": "function", "doc": "<p>Puts text into output field and disables it again.</p>\n\n<p>Args:\n    text (str): Message to display</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.DataFrame.clear_output", "modulename": "src.GUI", "qualname": "DataFrame.clear_output", "kind": "function", "doc": "<p>Removes text from output</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.DataFrame.toggle_input", "modulename": "src.GUI", "qualname": "DataFrame.toggle_input", "kind": "function", "doc": "<p><em>Deprecated since version 1.0.0.0 Due to some problems it doesn't toggle state.</em></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.DataFrame.toggle_output", "modulename": "src.GUI", "qualname": "DataFrame.toggle_output", "kind": "function", "doc": "<p><em>Deprecated since version 1.0.0.0 Due to some problems it doesn't toggle state.</em></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.AuthorsFrame", "modulename": "src.GUI", "qualname": "AuthorsFrame", "kind": "class", "doc": "<p>Footer with authors information</p>\n\n<p>Args:\n    ctk (CTkFrame): customtkinter container for objects</p>\n", "bases": "customtkinter.windows.widgets.ctk_frame.CTkFrame"}, {"fullname": "src.GUI.AuthorsFrame.__init__", "modulename": "src.GUI", "qualname": "AuthorsFrame.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">master</span></span>)</span>"}, {"fullname": "src.GUI.AuthorsFrame.b_font", "modulename": "src.GUI", "qualname": "AuthorsFrame.b_font", "kind": "variable", "doc": "<p>Font of label</p>\n"}, {"fullname": "src.GUI.AuthorsFrame.lbl_authors", "modulename": "src.GUI", "qualname": "AuthorsFrame.lbl_authors", "kind": "variable", "doc": "<p>Information about authors</p>\n"}, {"fullname": "src.GUI.App", "modulename": "src.GUI", "qualname": "App", "kind": "class", "doc": "<p>Startpoint of application. It hosts most of containers</p>\n\n<p>Args:\n    ctk (CTkFrame): customtkinter container for objects</p>\n", "bases": "customtkinter.windows.ctk_tk.CTk"}, {"fullname": "src.GUI.App.__init__", "modulename": "src.GUI", "qualname": "App.__init__", "kind": "function", "doc": "<p>Return a new top level widget on screen SCREENNAME. A new Tcl interpreter will\nbe created. BASENAME will be used for the identification of the profile file (see\nreadprofile).\nIt is constructed from sys.argv[0] without extensions if None is given. CLASSNAME\nis the name of the widget class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.GUI.App.image_frame", "modulename": "src.GUI", "qualname": "App.image_frame", "kind": "variable", "doc": "<p>Container of image</p>\n"}, {"fullname": "src.GUI.App.button_frame", "modulename": "src.GUI", "qualname": "App.button_frame", "kind": "variable", "doc": "<p>Container of buttons</p>\n"}, {"fullname": "src.GUI.App.data_frame", "modulename": "src.GUI", "qualname": "App.data_frame", "kind": "variable", "doc": "<p>Container for input and output</p>\n"}, {"fullname": "src.GUI.App.authors_frame", "modulename": "src.GUI", "qualname": "App.authors_frame", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.GUI.App.clear_image", "modulename": "src.GUI", "qualname": "App.clear_image", "kind": "function", "doc": "<p>Forwards image clearing from children to image frame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.App.get_input", "modulename": "src.GUI", "qualname": "App.get_input", "kind": "function", "doc": "<p>Forwards input from data frame to children</p>\n\n<p>Returns:\n    str: Content of input field</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.App.put_output", "modulename": "src.GUI", "qualname": "App.put_output", "kind": "function", "doc": "<p>Forwards text from children to data frame</p>\n\n<p>Args:\n    text (str): Text to display in output field</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.App.clear_output", "modulename": "src.GUI", "qualname": "App.clear_output", "kind": "function", "doc": "<p>Clears output field in data frame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.App.get_img", "modulename": "src.GUI", "qualname": "App.get_img", "kind": "function", "doc": "<p>Forwards image path from image frame to children</p>\n\n<p>Returns:\n    str: path of image displayed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.App.toggle_input", "modulename": "src.GUI", "qualname": "App.toggle_input", "kind": "function", "doc": "<p>Forwards toggle of state of input to desired or opposite if state is not provided</p>\n\n<p>Args:\n    state (str, optional): State wanted. <code>disabled</code> or <code>normal</code>. Defaults to None.</p>\n\n<p><em>Deprecated since version 1.0.0.0 Due to some problems with state toggling.</em></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.GUI.App.toggle_output", "modulename": "src.GUI", "qualname": "App.toggle_output", "kind": "function", "doc": "<p>Forwards toggle of state of output to desired or opposite if state is not provided</p>\n\n<p>Args:\n    state (str, optional): State wanted. <code>disabled</code> or <code>normal</code>. Defaults to None.</p>\n\n<p><em>Deprecated since version 1.0.0.0 Due to some problems with state toggling.</em></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.encodeChars", "modulename": "src.encodeChars", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.encodeChars.ROOT_DIR", "modulename": "src.encodeChars", "qualname": "ROOT_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;E:\\\\GitHub\\\\PYTHON_STEGANOGRAPHY&#x27;"}, {"fullname": "src.encodeChars.EncodeDecodeChars", "modulename": "src.encodeChars", "qualname": "EncodeDecodeChars", "kind": "class", "doc": "<p>Class for encoding and decoding characters to and from binary strings\nof length based on char*.json.</p>\n"}, {"fullname": "src.encodeChars.EncodeDecodeChars.__init__", "modulename": "src.encodeChars", "qualname": "EncodeDecodeChars.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">char_dict_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;charPolish.json&#39;</span></span>)</span>"}, {"fullname": "src.encodeChars.EncodeDecodeChars.BITS_USED", "modulename": "src.encodeChars", "qualname": "EncodeDecodeChars.BITS_USED", "kind": "variable", "doc": "<p>Informs how many bits are used by character dictionary to encode chars</p>\n", "annotation": ": int"}, {"fullname": "src.encodeChars.EncodeDecodeChars.code_to_char", "modulename": "src.encodeChars", "qualname": "EncodeDecodeChars.code_to_char", "kind": "variable", "doc": "<p>Dictionary with numbers and characters they represent</p>\n", "annotation": ": dict"}, {"fullname": "src.encodeChars.EncodeDecodeChars.char_to_code", "modulename": "src.encodeChars", "qualname": "EncodeDecodeChars.char_to_code", "kind": "variable", "doc": "<p>Reverse. Maps characters to numbers for quicker access</p>\n", "annotation": ": dict"}, {"fullname": "src.encodeChars.EncodeDecodeChars.name", "modulename": "src.encodeChars", "qualname": "EncodeDecodeChars.name", "kind": "variable", "doc": "<p>Name of character charset</p>\n", "annotation": ": str"}, {"fullname": "src.encodeChars.EncodeDecodeChars.char_to_bits", "modulename": "src.encodeChars", "qualname": "EncodeDecodeChars.char_to_bits", "kind": "function", "doc": "<p>Converts a character to a binary string of length\nbased on the number of characters in the dictionary,\nbased on the character encoding provided in the <code>char*.json</code> file.</p>\n\n<p>Args:\n    char (str): Character to be converted to binary</p>\n\n<p>Raises:\n    ValueError: When more than one character is provided\n    or the character is not in the dictionary</p>\n\n<p>Returns:\n    str: Returns a binary string of length <code>self.BITS_USED</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">char</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.encodeChars.EncodeDecodeChars.bits_to_char", "modulename": "src.encodeChars", "qualname": "EncodeDecodeChars.bits_to_char", "kind": "function", "doc": "<p>Converts a binary string of length based on <code>self.BITS_USED</code> to a character,</p>\n\n<p>Args:\n    bits (str): Binary string of length <code>self.BITS_USED</code></p>\n\n<p>Returns:\n    str: Character represented by the binary string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bits</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.encodeChars.EncodeDecodeChars.string_to_bits", "modulename": "src.encodeChars", "qualname": "EncodeDecodeChars.string_to_bits", "kind": "function", "doc": "<p>Converts a string to a list of binary strings of length <code>self.BITS_USED</code></p>\n\n<p>Args:\n    text (str): String to be converted to binary</p>\n\n<p>Returns:\n    List[str]: Returns a list of binary encoded characters</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.encodeChars.EncodeDecodeChars.bits_to_string", "modulename": "src.encodeChars", "qualname": "EncodeDecodeChars.bits_to_string", "kind": "function", "doc": "<p>Converts a list of binary strings of length <code>self.BITS_USED</code> to a string</p>\n\n<p>Args:\n    bits (List[str]): List of binary characters</p>\n\n<p>Returns:\n    str: Text represented by the binary strings</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bits</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.generateEncodingKey", "modulename": "src.generateEncodingKey", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.generateEncodingKey.GenerateKey", "modulename": "src.generateEncodingKey", "qualname": "GenerateKey", "kind": "class", "doc": "<p>Generate a key for encoding and decoding data.\nThe key is a string of numbers.\nThe length of the key is set by the key_length parameter.\nThe key is generated using the key_generator library.\nTo get key you have to use next() method.\nPossible formats of the key: <code>'int', 'hex', 'char'</code></p>\n"}, {"fullname": "src.generateEncodingKey.GenerateKey.__init__", "modulename": "src.generateEncodingKey", "qualname": "GenerateKey.__init__", "kind": "function", "doc": "<p>After creation and passing arguments you invoke next key generation,\nby using <code>next(Class)</code></p>\n\n<p>Args:\n    key_length (int, optional): Lenght of key to generate. Defaults to 32.\n    format (str, optional): Format of key. Valid <code>'int', 'hex', 'char'</code>.\n      Defaults to 'int'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key_length</span><span class=\"o\">=</span><span class=\"mi\">32</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">&#39;int&#39;</span></span>)</span>"}, {"fullname": "src.generateEncodingKey.GenerateKey.key_length", "modulename": "src.generateEncodingKey", "qualname": "GenerateKey.key_length", "kind": "variable", "doc": "<p>Length of key</p>\n", "annotation": ": int"}, {"fullname": "src.generateEncodingKey.GenerateKey.format", "modulename": "src.generateEncodingKey", "qualname": "GenerateKey.format", "kind": "variable", "doc": "<p>Format of key</p>\n", "annotation": ": str"}, {"fullname": "src.obfuscateText", "modulename": "src.obfuscateText", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.obfuscateText.ROOT_DIR", "modulename": "src.obfuscateText", "qualname": "ROOT_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;E:\\\\GitHub\\\\PYTHON_STEGANOGRAPHY&#x27;"}, {"fullname": "src.obfuscateText.TextObfuscator", "modulename": "src.obfuscateText", "qualname": "TextObfuscator", "kind": "class", "doc": "<p>Obfuscate and deobfuscate text using XOR cipher.</p>\n"}, {"fullname": "src.obfuscateText.TextObfuscator.__init__", "modulename": "src.obfuscateText", "qualname": "TextObfuscator.__init__", "kind": "function", "doc": "<p>Text obfuscator using <code>EncodeDecodeChars</code> and  <code>GenerateKey</code></p>\n\n<p>Args:\n    key_length (int, optional): Key length forwarded to GenerateKey. Defaults to 36.\n    key_format (str, optional): <code>'int', 'hex', 'char'</code>. Defaults to 'hex'.\n    char_dict_path (str, optional): Character dictionary from <code>resources</code>. Defaults to 'charPolish.json'.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">key_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">36</span>,</span><span class=\"param\">\t<span class=\"n\">key_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hex&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">char_dict_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;charPolish.json&#39;</span></span>)</span>"}, {"fullname": "src.obfuscateText.TextObfuscator.char_length", "modulename": "src.obfuscateText", "qualname": "TextObfuscator.char_length", "kind": "variable", "doc": "<p>Exposing of BITS_USED</p>\n"}, {"fullname": "src.obfuscateText.TextObfuscator.obfuscate", "modulename": "src.obfuscateText", "qualname": "TextObfuscator.obfuscate", "kind": "function", "doc": "<p>Obfuscate text using XOR cipher. The key is generated using the GenerateKey class.\nText is first converted to binary string.\nThen each character is XORed with a reversed segment of the key.\nThe segment is chosen based on the value of the key. If the value is even,\nthe key segment pointer increases by 1, else 2.\nIf the segment pointer is greater than the length of the key, it is set to 0.\nSegments of key are also cobnverted to binary strings.</p>\n\n<p>Args:\n    text (str): Message to obfuscate.\n    key (str, optional): Key to use for obfuscation. Defaults to None.</p>\n\n<p>Returns:\n    tuple[str, str]: Returns a tuple of obfuscated message and the key used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.obfuscateText.TextObfuscator.deobfuscate", "modulename": "src.obfuscateText", "qualname": "TextObfuscator.deobfuscate", "kind": "function", "doc": "<p>Deobfuscates binary string with same steps as when coding. It XORs with key\neach segment of message and based on values of key it does\nit from different point to get final result</p>\n\n<p>Args:\n    coded_message (str): Binary string representing text\n    key (str): string of characters to use when XORing</p>\n\n<p>Returns:\n    str: Result after decoding</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">coded_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.obfuscateText.TextObfuscator.coded_message_to_string", "modulename": "src.obfuscateText", "qualname": "TextObfuscator.coded_message_to_string", "kind": "function", "doc": "<p>Tries to display coded message without using key.\nIt just reads bits as they are</p>\n\n<p>Args:\n    coded_message (str): Binary string representing encoded text</p>\n\n<p>Returns:\n    str: Binary string converted to text</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">coded_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.steganographImage", "modulename": "src.steganographImage", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.steganographImage.ROOT_DIR", "modulename": "src.steganographImage", "qualname": "ROOT_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;E:\\\\GitHub\\\\PYTHON_STEGANOGRAPHY&#x27;"}, {"fullname": "src.steganographImage.SteganoImage", "modulename": "src.steganographImage", "qualname": "SteganoImage", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.steganographImage.SteganoImage.obfs", "modulename": "src.steganographImage", "qualname": "SteganoImage.obfs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.steganographImage.SteganoImage.width", "modulename": "src.steganographImage", "qualname": "SteganoImage.width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.steganographImage.SteganoImage.height", "modulename": "src.steganographImage", "qualname": "SteganoImage.height", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.steganographImage.SteganoImage.mode", "modulename": "src.steganographImage", "qualname": "SteganoImage.mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.steganographImage.SteganoImage.quick_encode", "modulename": "src.steganographImage", "qualname": "SteganoImage.quick_encode", "kind": "function", "doc": "<p>Encodes a text message into an image using a given key.</p>\n\n<p>Args:\n    key (str): The key to be used for encoding.\n    image (str): The path to the image file.\n    text (str): The text message to be encoded.</p>\n\n<p>Returns:\n    The encoded image.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">key</span>,</span><span class=\"param\">\t<span class=\"n\">image</span>,</span><span class=\"param\">\t<span class=\"n\">text</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;PIL.Image&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;E:</span><span class=\"se\">\\\\</span><span class=\"s1\">GitHub</span><span class=\"se\">\\\\</span><span class=\"s1\">PYTHON_STEGANOGRAPHY</span><span class=\"se\">\\\\</span><span class=\"s1\">venv</span><span class=\"se\">\\\\</span><span class=\"s1\">Lib</span><span class=\"se\">\\\\</span><span class=\"s1\">site-packages</span><span class=\"se\">\\\\</span><span class=\"s1\">PIL</span><span class=\"se\">\\\\</span><span class=\"s1\">Image.py&#39;</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.steganographImage.SteganoImage.quick_decode", "modulename": "src.steganographImage", "qualname": "SteganoImage.quick_decode", "kind": "function", "doc": "<p>Decodes a text message from an encoded image using a given key.</p>\n\n<p>Args:\n    key (str): The key to be used for decoding.\n    image (str): The path to the encoded image file.</p>\n\n<p>Returns:\n    The decoded text message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">image</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.steganographImage.SteganoImage.encode", "modulename": "src.steganographImage", "qualname": "SteganoImage.encode", "kind": "function", "doc": "<p>Used for encoding message in pixels value of photo</p>\n\n<p>Args:\n    key (str): The key to be used for encoding.\n    image (str): The path to the image file.\n    text (str): The text message to be encoded.\n    output (str, optional): The output has path where encoded photo will be. Defaults to None.</p>\n\n<p><em>Deprecated since version 1.0.0.0 For 4K it takes around 90s. Use quick_encode.</em></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.steganographImage.SteganoImage.decode", "modulename": "src.steganographImage", "qualname": "SteganoImage.decode", "kind": "function", "doc": "<p>Decodes a text message from an encoded image using a given key.</p>\n\n<p>Args:\n    key (str): The key to be used for decoding.\n    image (str): The path to the encoded image file.</p>\n\n<p>Returns:\n    The decoded text message.</p>\n\n<p><em>Deprecated since version 1.0.0.0 For 4K it takes around 30s. Use quick_decode.</em></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();